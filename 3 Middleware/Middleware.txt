/*
https://expressjs.com/en/guide/writing-middleware.html
*/

MiddleWare
--------------------
Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. The next middleware function is commonly denoted by a variable named next.

Middleware functions can perform the following tasks:

1) Execute any code.
2) Make changes to the request and the response objects.
3) End the request-response cycle.
4) Call the next middleware function in the stack.

If the current middleware function does not end the request-response cycle, it must call next() to pass control to the next middleware function. Otherwise, the request will be left hanging.

The following figure shows the elements of a middleware function call: see diagram image express-mw.png

[Example]

----> Middleware function myLogger
Here is a simple example of a middleware function called “myLogger”. This function just prints “LOGGED” when a request to the app passes through it. The middleware function is assigned to a variable named myLogger.

var myLogger = function (req, res, next) {
  console.log('LOGGED')
  next()
}

To load the middleware function, call app.use(), specifying the middleware function. For example, the following code loads the myLogger middleware function before the route to the root path (/).

var express = require('express')
var app = express()

var myLogger = function (req, res, next) {
  console.log('LOGGED')
  next()
}

app.use(myLogger)

app.get('/', function (req, res) {
  res.send('Hello World!')
})

app.listen(3000)

-->Every time the app receives a request, it prints the message “LOGGED” to the terminal.

-->The order of middleware loading is important: middleware functions that are loaded first are also executed first.

-->If myLogger is loaded after the route to the root path, the request never reaches it and the app doesn’t print “LOGGED”,because the route handler of the root path terminates the request-response cycle.

-->The middleware function myLogger simply prints a message, then passes on the request to the next middleware function in the stack by calling the next() function.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

/*
https://medium.com/@alirezakargar/what-app-use-method-do-in-express-js-7ea533d55b4e
*/

An Express application can use the following types of middleware:
---------------------------------------------------------------------------------------------------------------
1) Application-level middleware
2) Router-level middleware
3) Error-handling middleware
4) Built-in middleware
5) Third-party middleware

/*
An Express application can use any of the below mentioned types of middleware:

1) Application-level middleware : app.use

2) Router-level middleware : router.use

3) Error handling middleware app.use(err,req,res,next)

4) Built-in middleware : express.static,express.json,express.urlencoded

5) Third-party middleware : bodyparser,cookieparser
*/

You can load application-level and router-level middleware with an optional mount path. You can also load a series of 
middleware functions together, which creates a sub-stack of the middleware system at a mount point.

-----------------------------------------------------------------------------------------------------------------
What is the use of app.use() in Express ?

-->Each app. use(middleware) is called every time a request is sent to the server.
--> app. use() used to Mounts(joins) the middleware function or mount to a specified path,the middleware function is executed when the base path matches.


Why middleware
----------------------------
Middleware  functions are used to modify req and res objects for tasks like parsing request bodies (here body-parser is used to parse the body of requests), adding response headers(like res.header('Content-Type','application/json')), etc.

